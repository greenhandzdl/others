@startuml
actor User
participant main
participant LibraryCache as Cache
participant "std::shared_ptr<void>" as SharedPtr
participant "std::unique_ptr<void, decltype(&dlclose)>" as UniquePtr

User -> main: Run program
main -> Cache: load("./libmylib.so")
Cache -> Cache: Check cache for "./libmylib.so"
Cache -> Cache: Not found, load library
Cache -> UniquePtr: Create unique pointer
Cache -> SharedPtr: Create shared pointer
Cache -> Cache: Update cache with new entry
main -> SharedPtr: Get function "hello"
SharedPtr -> Cache: Get raw pointer
Cache -> main: Return function pointer
main -> main: Call hello()
main -> Cache: load("./libmylib.so")
Cache -> Cache: Check cache for "./libmylib.so"
Cache -> Cache: Found, update last access
main -> SharedPtr: Get function "add"
SharedPtr -> Cache: Get raw pointer
Cache -> main: Return function pointer
main -> main: Call add(3, 5)
main -> Cache: clean_expired()
Cache -> Cache: Clean expired entries
main -> Cache: load("./libmylib.so")
Cache -> Cache: Check cache for "./libmylib.so"
Cache -> Cache: Found, update last access
main -> SharedPtr: Get function "add"
SharedPtr -> Cache: Get raw pointer
Cache -> main: Return function pointer
main -> main: Call add(7, 2)
@enduml